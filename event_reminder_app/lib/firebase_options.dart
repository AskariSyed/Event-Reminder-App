// File generated by FlutterFire CLI.
// ignore\_for\_file: type=lint
import 'secrets.dart';
import 'package\:firebase\_core/firebase\_core.dart' show FirebaseOptions;
import 'package\:flutter\_dotenv/flutter\_dotenv.dart';
import 'package\:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default \[FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// `dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// `
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: Secrets.WEB_API_KEY,
    appId: Secrets.WEB_APP_ID,
    messagingSenderId: Secrets.WEB_MESSAGING_SENDER_ID,
    projectId: Secrets.WEB_PROJECT_ID,
    authDomain: Secrets.WEB_AUTH_DOMAIN,
    storageBucket: Secrets.WEB_STORAGE_BUCKET,
    measurementId: Secrets.WEB_MEASUREMENT_ID,
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: Secrets.ANDROID_API_KEY,
    appId: Secrets.ANDROID_APP_ID,
    messagingSenderId: Secrets.ANDROID_MESSAGING_SENDER_ID,
    projectId: Secrets.ANDROID_PROJECT_ID,
    storageBucket: Secrets.ANDROID_STORAGE_BUCKET,
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: Secrets.WINDOWS_API_KEY,
    appId: Secrets.WINDOWS_APP_ID,
    messagingSenderId: Secrets.WINDOWS_MESSAGING_SENDER_ID,
    projectId: Secrets.WINDOWS_PROJECT_ID,
    authDomain: Secrets.WINDOWS_AUTH_DOMAIN,
    storageBucket: Secrets.WINDOWS_STORAGE_BUCKET,
    measurementId: Secrets.WINDOWS_MEASUREMENT_ID,
  );
}
